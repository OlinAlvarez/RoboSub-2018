// Generated by gencpp from file computer_vision_driver/CvInfo.msg
// DO NOT EDIT!


#ifndef COMPUTER_VISION_DRIVER_MESSAGE_CVINFO_H
#define COMPUTER_VISION_DRIVER_MESSAGE_CVINFO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace computer_vision_driver
{
template <class ContainerAllocator>
struct CvInfo_
{
  typedef CvInfo_<ContainerAllocator> Type;

  CvInfo_()
    : cameraNumber(0)
    , taskNumber(0)
    , givenColor(0)
    , givenShape(0)
    , givenLength(0.0)
    , givenDistance(0.0)  {
    }
  CvInfo_(const ContainerAllocator& _alloc)
    : cameraNumber(0)
    , taskNumber(0)
    , givenColor(0)
    , givenShape(0)
    , givenLength(0.0)
    , givenDistance(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _cameraNumber_type;
  _cameraNumber_type cameraNumber;

   typedef int32_t _taskNumber_type;
  _taskNumber_type taskNumber;

   typedef int32_t _givenColor_type;
  _givenColor_type givenColor;

   typedef int32_t _givenShape_type;
  _givenShape_type givenShape;

   typedef float _givenLength_type;
  _givenLength_type givenLength;

   typedef float _givenDistance_type;
  _givenDistance_type givenDistance;




  typedef boost::shared_ptr< ::computer_vision_driver::CvInfo_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::computer_vision_driver::CvInfo_<ContainerAllocator> const> ConstPtr;

}; // struct CvInfo_

typedef ::computer_vision_driver::CvInfo_<std::allocator<void> > CvInfo;

typedef boost::shared_ptr< ::computer_vision_driver::CvInfo > CvInfoPtr;
typedef boost::shared_ptr< ::computer_vision_driver::CvInfo const> CvInfoConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::computer_vision_driver::CvInfo_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::computer_vision_driver::CvInfo_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace computer_vision_driver

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'computer_vision_driver': ['/home/hero/Programming/catkin_lunar/src/computer_vision_driver/msg'], 'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::computer_vision_driver::CvInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::computer_vision_driver::CvInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::computer_vision_driver::CvInfo_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::computer_vision_driver::CvInfo_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::computer_vision_driver::CvInfo_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::computer_vision_driver::CvInfo_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::computer_vision_driver::CvInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8723a30b7f69c63ec944a866a7c37339";
  }

  static const char* value(const ::computer_vision_driver::CvInfo_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8723a30b7f69c63eULL;
  static const uint64_t static_value2 = 0xc944a866a7c37339ULL;
};

template<class ContainerAllocator>
struct DataType< ::computer_vision_driver::CvInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "computer_vision_driver/CvInfo";
  }

  static const char* value(const ::computer_vision_driver::CvInfo_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::computer_vision_driver::CvInfo_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 cameraNumber\n\
int32 taskNumber\n\
int32 givenColor\n\
int32 givenShape\n\
float32 givenLength\n\
float32 givenDistance\n\
";
  }

  static const char* value(const ::computer_vision_driver::CvInfo_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::computer_vision_driver::CvInfo_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.cameraNumber);
      stream.next(m.taskNumber);
      stream.next(m.givenColor);
      stream.next(m.givenShape);
      stream.next(m.givenLength);
      stream.next(m.givenDistance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CvInfo_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::computer_vision_driver::CvInfo_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::computer_vision_driver::CvInfo_<ContainerAllocator>& v)
  {
    s << indent << "cameraNumber: ";
    Printer<int32_t>::stream(s, indent + "  ", v.cameraNumber);
    s << indent << "taskNumber: ";
    Printer<int32_t>::stream(s, indent + "  ", v.taskNumber);
    s << indent << "givenColor: ";
    Printer<int32_t>::stream(s, indent + "  ", v.givenColor);
    s << indent << "givenShape: ";
    Printer<int32_t>::stream(s, indent + "  ", v.givenShape);
    s << indent << "givenLength: ";
    Printer<float>::stream(s, indent + "  ", v.givenLength);
    s << indent << "givenDistance: ";
    Printer<float>::stream(s, indent + "  ", v.givenDistance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COMPUTER_VISION_DRIVER_MESSAGE_CVINFO_H
